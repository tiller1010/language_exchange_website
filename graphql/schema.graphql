scalar Upload

# User Content Schema
type Video {
	_id: ID!
	title: String!
	src: String!
	originalName: String!
	thumbnailSrc: String!
	originalThumbnailName: String!
	created: String!
	likes: Int!
	uploadedBy: User!
	languageOfTopic: String!
}

type User {
	_id: ID
	email: String
	displayName: String
	profilePictureSrc: String
	firstName: String!
	lastName: String!
	passwordHash: String!
	completedTopics: String!
	verified: Boolean
	isAdmin: Boolean!
	uploadedVideos: [Video!]
	likedVideos: [Video!]
	products: [Product!]
	premiumVideoChatListing: PremiumVideoChatListing
	connectedStripeAccountID: String
}

input UserInputs {
	email: String
	displayName: String
	firstName: String
	lastName: String
	password: String
}

type UserFeed {
	users: [User]
}

# union PossibleProduct = PremiumVideoChatListing | OtherProduct
union PossibleProduct = PremiumVideoChatListing

# Premium Video Chat Schema
type Product {
	_id: ID
	userID: ID
	cost: Float
	currency: String
	orderedOn: String
	productObject: PossibleProduct
	productObjectCollection: String
	priceID: String
	status: String
}

type PremiumVideoChatListing {
	_id: ID
	userID: ID
	topic: String
	languageOfTopic: String
	duration: String
	thumbnailSrc: String
	price: Float
	currency: String
	timeSlots: [VideoChatTimeSlot]
}

type VideoChatTimeSlot {
	productID: ID
	customerUserID: ID
	date: String
	time: String
	booked: Boolean
	completed: Boolean
	paid: Boolean
}

input VideoChatTimeSlotInputs {
	shouldAddProductID: Boolean # Used when creating new product
	customerUserID: ID
	date: String
	time: String
	booked: Boolean
	completed: Boolean
	paid: Boolean
	productID: String
}

input PremiumVideoChatListingInputs {
	topic: String
	languageOfTopic: String
	duration: String
	price: Float
	currency: String
	timeSlots: [VideoChatTimeSlotInputs]
}

type PremiumVideoChatListingFeed {
	listings: [PremiumVideoChatListing]
}

# Strapi Schema
# Level Schema
type Level {
	id: String
	attributes: LevelAttributes
}
type LevelAttributes {
	Level: String
	topics: TopicsData
}
type TopicsData {
	data: [Topic]
}

# Topic Schema
type Topic {
	id: String
	attributes: TopicAttributes
}
type TopicAttributes {
	Topic: String
	FeaturedMedia: StrapiMedia
	challenges: ChallengeData
}
type ChallengeData {
	data: [Challenge]
}

# Challenge Schema
type Challenge {
	id: String
	attributes: ChallengeAttributes
}
type ChallengeAttributes {
	Title: String
	Content: String
	FeaturedMedia: StrapiMedia
}

# Strapi Media Schema
type StrapiMedia {
	data: StrapiMediaData
}
type StrapiMediaData {
	attributes: StrapiMediaDataAttributes
}
type StrapiMediaDataAttributes {
	mime: String
	url: String
	alternativeText: String
}

type LevelFeed {
	levels: [Level]
	showChallenge: Boolean
}

# Queries
type Query {
	indexVideos: [Video]
	getRecentPremiumVideoChatListings: PremiumVideoChatListingFeed
	searchPremiumVideoChatListings(topic: String, languageOfTopic: String): PremiumVideoChatListingFeed
	searchLessons(topicQuery: String, languageOfTopic: String): LevelFeed
	findUserByID(userID: String!): User
	getRecentUsers: UserFeed
	searchUsers(searchQuery: String): UserFeed
}

# Mutations
type Mutation {
	addLike(userID: ID!, videoID: ID!): Video
	removeLike(userID: ID!, videoID: ID!): Video
	verifyUser(userID: ID!, verificationStatus: Boolean!): User
	addPremiumVideoChatListing(userID: ID!, premiumVideoChatListing: PremiumVideoChatListingInputs, thumbnailFile: Upload): PremiumVideoChatListing
	addPremiumVideoChatListingThumbnailTest(thumbnailFile: Upload): PremiumVideoChatListing
	updatePremiumVideoChatListing(listingID: ID!, premiumVideoChatListing: PremiumVideoChatListingInputs, thumbnailFile: Upload): PremiumVideoChatListing
	removePremiumVideoChatListing(userID: ID!): Boolean
	updateUser(userID: ID!, user: UserInputs, profilePictureFile: Upload): User
	createProduct(productObjectCollection: String!, productDescription: String!, productObjectID: ID!, userID: ID!, productObjectUpdateData: String!): Product
}